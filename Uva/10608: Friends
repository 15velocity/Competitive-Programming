#include<iostream>

using namespace std;

int s[50000];

int find(int x)
{
	if(s[x]<=-1)
		return x;
	else
		return find(s[x]);
}

void Union(int u,int v)
{
	if(u==v || find(u)==find(v))
		return;
	if(find(u)<find(v))
	{
		s[find(u)]+=s[find(v)];
		s[find(v)]=find(u);
	}
	else
	{
		s[find(v)]+=s[find(u)];
		s[find(u)]=find(v);
	}
}


int main()
{
	int tc,m,n,p,q,ans,flag;
	cin>>tc;
	while(tc--)
	{
		ans=50000;
		flag=1;					//check trival case when no mutual friend is there
		cin>>n>>m;
		for(int i=1;i<=n;i++)
			s[i]=-1;
		for(int i=0;i<m;i++)
		{
			cin>>p>>q;
			Union(p,q);
		}
		for(int i=1;i<=n;i++)
		{
			if(s[i]!=-1)
				flag=0;
			if(s[i]<ans)
				ans=s[i];
		}
		if(flag)
			cout<<0<<endl;
		else	
			cout<<-1*ans<<endl;
	}
}
